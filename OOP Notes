Object Oriented Progamming Breakdown and Keywords
* https://gist.github.com/ryansobol/5252653
# Launch School OOP book or 130 course
-- rubylearning.com

USEFUL
http://web.programminghub.io/#/interviewquestions/Ruby
https://www.leighhalliday.com/object-hierarchy-in-ruby
http://practicingruby.com/articles/method-lookup-1


Object Oriented Programming (OOP)
  Programming paradigm

  WHY OOP?
    # Programmers needed a way to create containers for data that could be changed and manipulated without affecting the whole program.
    They needed a a way to SECTION OFF AREAS OF CODE that perform certain procedures so that their programs could become THE INTERACTION OF SMALL PARTS, as opposed to one massive blob of dependancy.


  ENCAPSULATION and POLYMORPHISM
    # ENCAPSULATION: is hiding pieces of FUNCTIONALITY and making it unavailable to the rest of the code base. It is a form of data protection, so that DATA CANNOT be MANIPULATED or changed without obvious INTENTION. It is what defines the boundaries in your application and allows your code to achieve new levels of complexity. Ruby, like many other OO languages, accomplishes this task by CREATING OBJECTS, and EXPOSING INTERFACES (i.e., METHODS) to interact with those objects.
    POLYMORPHISM:
    http://stackoverflow.com/questions/1031273/what-is-polymorphism-what-is-it-for-and-how-is-it-used
    If anybody says CUT to these people
      The Surgeon
      The Hair Stylist
      The Actor
    What will happen?
      The Surgeon would begin to make an incision.
      The Hair Stylist would begin to cut someone's hair.
      The Actor would abruptly stop acting out of the current scene, awaiting directorial guidance.
    So above representation shows What is polymorphism (same name, different behavior) in OOP.

    # Polymorphism can be achieved by subclasses and modules (module `methods).


  VARIABLES
    can store INFORMATION
    using MEMORY POINTERS and built-in DATA TYPES (such as strings, hash tables, arrays)

    (https://www.tutorialspoint.com/ruby/ruby_classes.htm)
    RUBY PROVIDES DIFFERENT TYPES OF VARIABLES
      LOCAL VARIABLES - Local variables are the variables that are defined in a method. Local variables are not availble outside the method

      INSTANCE VARIABLES - Instance variables are availble across methods for any particular instance or object. This means that instance variables change from object to object. Instance variables are preceded by the sign (@)
      # Exist as long as the objects instance exists and is one of the ways we tie data to it. Instance variables are responsible for keeping track of data about the state of an object.

      CLASS VARIABLES - Class variables are available across different objects that are instances of the same class. A class variable belongs to the class and is a characteristic of that Class. They are preceded by the sign (@@)

      GLOBAL VARIABLES - Class variables are not available across classes. If you want to have a single variable, which is available across classes, you need to define a global variable. The global varaibles are always preceded by the dollar sign ($)

      NOT REALLY A VARIABLE
      and
      CONSTANTS - Begin with a capital (although Ruby convention is all-caps snakecase) defined within a class or module can be accessed from within that class or module and those defined outside a class or module can be accesed globally. Making an assignment to a constant that is aready initialized procudes a warning.
      # used as a variable that will never change for any reason.


  METHODS also called PROCEDURES
    can take INPUT, generate OUTPUT and MANIPULATE DATA.

    * There are three ways of to INVOKE a method in ruby.
    object = Object.new
    object.method_id
    object.send(:method_id)
    object.method(:method_id).call

    #
    INSTANCE METHODS
      All instances of a class have the same BEHAVIOURS (Methods), though they might contain different states.
      We can EXPOSE INFORMATION about the STATE of the OBJECT using INSTANCE METHODS.

    CLASS METHODS
      METHODS that can be called DIRECTLY ON THE CLASS itself WITHOUT INSTANTIATING ANY OBJECTS. These methods are SCOPED to the CLASS.
      WHERE we put FUNCTIONALITY that does NOT PERTAIN to INDIVIDUAL OBJECTS
      Defined by prepending self. to the method name

    USING CLASS METHODS/CLASS VARIABLES EXAMPLE

      class AClass
        @@counter = 0

        def initialize
          @@counter += 1
        end

        def self.total_count
          @@counter
        end
      end

    OVERRIDING METHODS
      -- Method overriding, in OOP is a language feature that allows a subclass to provide a specific implementation of a method that is already provided by one of its superclasses. The implementation in the subclass overrides (replaces) the implementation in the superclass.

      # The to_s method
        (tutorialspoint) - Any class you define should have a to_s instance method to return the correct string representation of that object.
        Comes built in to every class in Ruby.
        # puts method automatically calls to_s on its argument
        also called automatically in string interpolation
        The default to_s method of custom classes prints the objects class and the encodeing of the object id.
          Which is why overriding this method makes sense and is commonplace

          class AClass
            def initialize
              @variable = 'hello!'
            end

            def to_s
              "We've overritten the to_s method, #{@variable}"
            end
          end

    ACCIDENTAL METHOD OVERRIDING
      Remember that every class you create INHERENTLY SUBCLASSES FROM CLASS OBJECT
        which has a lot of important methods
      Accidentally overrding a method could have FAR-REACHING EFFECTS on your code.


  OBJECTS
    What is an object?
    * An instance of a class.
      To some it's also the root class in ruby (Object).
      Classes themselves descend from Object root class.

    OBJECTS contain DATA in form of a FIELD/S
      in RUBY this is data ENCAPSULATED by a CLASS * To some it's also the root class in ruby (Object)
        ATTRIBUTES (STATES) and BEHAVIOURS of objects DEFINED in CLASSES.

        each OBJECT is an INSTANCE created by INSTANTIATION of it's CLASS (we INSTANTIATED an OBJECT called sparky from the CLASS gooddog)
        The object is returned by calling the CLASS METHOD #new

        Code Example

          object = 'string text'
          object.class # => String


      Is everything in ruby an object?
        (http://web.programminghub.io/#/interviewquestions/Ruby)
          Methods are not objects. Blocks are not objects. Keywords are not objects. However, there exist Method objects and Proc objects, and some keywords refer to objects.
            To understand Method objects - http://stackoverflow.com/questions/2602340/methods-in-ruby-objects-or-not
                                           http://ruby-doc.org/core-2.2.0/Method.html
        (http://rubylearning.com/blog/2010/09/27/almost-everything-is-an-object-and-everything-is-almost-an-object/)
          It's almost true, but not quite. Not everything in ruby is an object BUT there's a corollary to this point EVERYTHING DOES EVALUATE TO AN OBJECT.
        # OOP BOOK
          Everything in ruby is an object.


  CLASSES
    * What is a class?
    Classes are a blue-print for constructing computer models for real or virtual objects.
    Classes hold data, have methods that interact with that data and are used to instantiate objects.

    # CLASSES DEFINE OBJECTS, they define an objects STATES AND BEHAVIOURS.
    STATES track ATTRIBUTES for each object.
      Think VARRIABLES
      DIFFERENT INFORMATION for each instance is tracked by INSTANCE VARIABLES and are how objects KEEP TRACK OF THEIR STATES.
        INSTANCE VARIABLES are SCOPED at the OBJECT.
    BEHAVIOURS define what the object is capable of doing.
      Think METHODS
      Every INSTANCE (object) of a CLASS contain INDENTICAL BEHAVIOURS defined by INSTANCE METHODS.
        Instance methods are availble to objects (instances) of that class.

    INSTANTIATION is the process of creating a NEW OBJECT (instance) from a CLASS.

    # Creating a new OBJECT and INSTANTIATE it with some STATE, like a name.
    class GoodDog
      def initialize(name)
        @name = name
      end
    end

    sparky = GoodDog.new('sparky')


    *
    class WhatAreClasses
      def initialize
        @data = "I'm instance data of this object. Hello."
      end

      def method
        puts @data.gsub("instance", "altered")
      end
    end

    object = WhatAreClasses.new
    object.method #=> I'm altered data of this object. Hello.


    GOOGLE - What are CONTAINER CLASSES?
      In computer science, a container is a class, a data structure, or an abstract data type (ADT) whose instances are collections of other objects. In other words, they store objects in an organized way that follows specific access rules. The size of the container depends on the number of objects (elements) it contains.

    # a CONSTRUCTOR is a subroutine (METHOD) that prepares the new object for use.
      In Ruby's case the INITIALIZE method (initialize is invoked during performing the #new method)
        (ruby-doc.org) #new calls #allocate to create a new object of the class's class, then invokes that objects #initialize method passing in args
        The initialize method does not return any values

        (rubylearning.com) The construction is done via the new class method, the initialization is done via the initialize instance method. initialize is not a constructor.


  INHERITANCE (CLASS INHERITANCE)
    -- Inheritance is a relation between two classes. The benefit of inheritance is that that lower classes down the hierachy get the features of those higher up but can also add specific features of their own. In ruby a class (subclass) can only inherit from a single other class (superclass), HOWEVER that class can inherit from another class and so on and so forth.

    Thus INHERITANCE allows you to create a class that is a REFINEMENT or SPECIALIZATION of ANOTHER CLASS.

    INHERITANCE is indicated by <

      class HigherInHierachy
        def inherited_method
          "I've been inherited!"
        end
      end

      class LowerInHierachy < HigherInHierachy
        #
      end

      puts LowerInHierachy.new.inherited_method # => "I've been inherited!"

    # This means all the methods in the Superclass are availble to the Subclass. In Ruby, initialize is an ordinary method and is inherited like any other.
    We can override methods by defining them in the Subclass.

    Inheritance can be a great way to remove duplication in your code base. It also follows the DRY(do not repeat yourself) theory.
      Which means potentially extracting logic to one place that can be reused


  SUPER
    A built-in function that will SEARCH the INHERITANCE HIERARCHY for a METHOD OF THE SAME NAME and then INVOKE THAT METHOD.
      If we use SUPER THAT TAKES NO ARGS but the SUPERCLASS METHOD REQUIRES args super AUTOMATICALLY FORWARDS the ARGUEMENTS that were passed to the method (example 1)
        When called with specified arguments the specified args will be sent up the method lookup chain (example 2)

    # example 1
    class ASuperclass
      def initialize(first_variable)
        @first_var = first_variable
      end
    end

    class ASubclass < ASuperclass
      def initialize(second_variable)
        super
        @second_var = second_variable
      end
    end

    example = ASubclass.new('test_var') # => #<ASubclass:0x007fd3d4058750 @first_var=\"test_var\", @second_var=\"test_var\">

    # example 2
    class ASuperclass
      def initialize(first_variable)
        @first_var = first_variable
      end
    end

    class ASubclass < ASuperclass
      def initialize(first_variable, second_variable)
        super(first_variable)
        @second_var = second_variable
      end
    end

    example = ASubclass.new('first', 'second') # => #<ASubclass:0x007fd3d4058750 @first_var=\"first\", @second_var=\"second\">


  MODULE METHODS
    # MODULE another way of achieving POLYMORPHISM.
    USING MODULES as a CONTAINER for METHODS
      A COLLECTION of behaivours that via MIXINS are usable in other CLASSES
      Using MODULES to GROUP COMMON BEHAVIOURS allows us to practice DRY (do not repeat) design and gives a FLEXIBLE design
      COMMON CONVENTION
        'able' behaviour use module methods (swimmable, climable)
        is-a relationship - CLASS INHERITANCE
        has-a relationship - MODULE METHODS
      You can MIXIN AS MANY MODULES as you like.

    * MODULES provide a MECHANISM for MULTIPLE INHERITANCE via MIX-INS. They CANNOT BE INSTANTIATED like classes can.

    module AMixIn
      def who_am_i?
        puts "An existentialist, that's who"
      end
    end

    # String is already the parent class
    class DeepString < String
      # extend adds instance methods from AMixIn as CLASS methods
      extend AMixIn
      # include adds instance methods from AMixIn as INSTANCE methods
      include AMixIn
    end


  MODULE NAMESPACES
    * Modules can serve as a mechanism for namespaces
    # using Modules for NAMESPACING -
        Organizing similar classes under a module. The advantage of using MODULES to GROUP RELATED CLASSES -
          1. Easy to RECONGNIZE RELATED classes in our code.
          2. REDUCES the likelihood of our CLASSES COLLIDING with OTHER SIMILARLY NAMED CLASSES in our CODEBASE.

    *
    module ANamespace
      class AClass
        def initialize
          puts "Another object, coming right up!"
        end
      end
    end

    ANamespace::AClass.new #=> Another object, coming right up!

    # we CALL CLASSES in a MODULE by APPENDING the CLASS NAME to the MODULE NAME with TWO COLONS (::)


  METHOD LOOKUP PATH
    # Ruby has a lookup path that it follows each time a method is called. We can use the ANCESTORS method on any class to find out the METHOD LOOKUP CHAIN. That is the order in which classes are inspected when you call a method.
    First Ruby will look in the SUPERCLASS FIRST, MIXIN MODULES IN REVERSE THEN MOVE ON TO THE SUBCLASS AND IT'S MIXINS/SUBCLASS so on so forth. Ruby will STOP LOOKING ONCE IT HAS FOUND THE METHOD.


  ACCESS CONTROL
    # A PUBLIC METHOD is a method that is AVAILBLE TO ANYONE who knows EITHER the CLASS NAME OR OBJECTS NAME. They COMPRISE of the CLASSES INTERFACE.
      Thats how other classes and objects will interact with this class and its objects

    A PRIVATE METHOD works IN the CLASS but are UNAVAILBLE to the rest of the program. Private methods are defined by using the KEYWORD PRIVATE in our program. ANYTHING UNDER private will be IS PRIVATE. UNLESS ANOTHER KEYWORD is used to NEGATE IT.
      note: The initialize method is always private automatically

    * All methods, no matter the access control can be accessed WITHIN the class. But what about outside callers?
    Public methods enforce no access control - they can be called on any scope.
    Protected methods are only accessible to other objects of the SAME class.
    Private methods are only accessible within the context of the current object.

    class AccessLevel
      def something_interesting
        another = AccessLevel.new
        another.public_method
        another.protected_method
        another.private_method
      end

      def public_method
        puts "Public method. Nice to meet you."
      end

      protected

      def protected_method
        puts "Protected method. Sweet!"
      end

      private

      def private_method
        puts "Incoming exception!"
      end
    end

    AccessLevel.new.something_interesting
    #=> Public method. Nice to meet you.
    #=> Protected method. Sweet!
    #=> NoMethodError: private method


  ACCESSOR METHODS
    # GETTER and SETTER methods are way to EXPOSE and CHANGE an OBJECTS STATE.
      Can be used from WITHIN the class.
    As a convention, getter and setter methods should use the same name as the instance variable they are exposing and setting.

    Ruby has built-in way to automatically create getter and setter methods.
    All the attr_* methods take a symbol as parameters.
    GETTER - return value of instance variable :attr_reader
      def instance_var
        @instance_var
      end

    SETTER - set value of instance variable :attr_writer
      def instance_var=(value)
        @instance_var = value
      end

    BOTH - :attr_accessor

    These methods save us a great deal of code for example
      attr_accessor :name, :height, :weight
    This one line of code gives us six getter/setter instance methods: name, name=, height, height=, weight, weight= It also gives us three instance variables: @name, @height, @weight
    NOTE:
      (http://stackoverflow.com/questions/15514378/does-rubys-attr-accessor-automatically-create-instance-variables-for-attributes)
      All attr_* methods DO NOT actually initialize the instance variable (this disagrees with the OOP book above but can be proven as below)
        class Test
          attr_accessor :variable
        end

        example = Test.new
        example.instance_variables # => []

      HOWEVER invoking the setter method does cause the variable to become defined.

    It's a good idea to call these methods instead of the variables themselves, for example
      attr_accessor :variable

      def aInstanceMethod
        "#{variable}" # <- GOOD
        "#{@variable}" # <- BAD
      end

    Why is this useful?
      If DO NOT want to EXPOSE RAW DATA. If you only wanted to expose the last four digits of an instance variable with our own getter method, for example

      @instance_var = '123-45-6789'

      def instance_var
        # converts '123-45-6789' to 'xxx-xx-6789'
        'xxx-xx-' + @instance_var.split('-').last
      end

      Also follows Don't Repeat Yourself, and makes bug fixing easier (only have to check one place)

      When REPLACING accessing the INSTANCE VARIABLE directly with SETTER METHODS we have to DISAMBIGUATE from creating a LOCAL VARIABLE and call the SETTER METHODS WITH SELF

        def change_variable(new_value)
          name = new_value # creates a local variable in the scope of the change_variable method called name and assigns it to the arg new_value
          self.name = new_value # calls the setter method on the instance variable name and assigns it to the arg new_value
        end

      To be consistent we could also adopt this syntax for getter methods but it is not required.


  SELF
    What does self mean?
      *
      Self always referes to the current object. But this question is more difficult than it seems because Classes are also objects in ruby.
      # self changes depending on the scope it's defined in
      self inside an instance method references the instance (object) that called the method
      self outside of an instance method references the class and can be used to define class methods
      *

      class WhatIsSelf
        def test
          puts "At the instance level, self is #{self}"
        end

        def self.test
          puts at the class level, self is #{self}
        end
      end

      WhatIsSelf.test
      #=> At the class level self is WhatIsSelf

      WhatIsSelf.new.test
      #=> At the instance level, self is #<WhatIsSelf: memory_location e.g 0x28190>

      What this indicates is:
        At the CLASS level self is the class.
        At the INSTANCE level self is the instance in context, in this case the instance WhatIsSelf at memory location 0x28190.


  CLOSURES also called ANONYMOUS FUNCTIONS
    # A closure CONCEPT to SAVE A 'chunk of code' (block) and EXECUTE IT LATER.
      Three ways in ruby: BLOCK, PROC and LAMBDA
      A closure remembers the values of variables in the scope when the function of the block was defined and can access them even if executed in a different scope.
        can ONLY APPEAR in an ARGUMENT LIST.
        AT MOST ONE BLOCK CAN APPEAR IN AN ARGUMENT LIST


    BLOCKS
      # Are ENCLOSED in a DO/END statement or BRACKETS {}
      Part of the syntax for a method call.
      CAN have MULTIPLE ARGUMENTS.
        arg names are defined between two pipes |arglist|
      In ruby EVERY METHOD can take an OPTIONAL BLOCK as implicit parameter.
        One way of invoking the block is with the YIELD keyword.
          LINIENT ARITY RULES (arity: rules enforced about number of args passed to a method or block)
            When using yield and passing in EXTRA ARGS they will be IGNORED and the code will be executed.
            ARGS note given but required (not enough args passed to the block) will result in them being executed with nil as the arg parameter.
      They have a return value just the same as methods that is determined by the blocks last expression.
      When to use:
        When the method implementor is unsure of how the method will be called by the method caller.
        Possibly instead of passing in a 'flag' which may result in an if or case statement.
          eg select that takes a block instead of select_odds, and select_greater_than(num)

      (rubylearning.com) If you provide a code block when you call a method, then inside the method, you can yield control to that code block - suspend execution of the method; execute the code in the block; and return control to the method body, right after the call to yield. If no code block is passed and yield is called, Ruby raises an exception:

        code example

          def none?(array)
            array.each { |el| return false if yield(el) }
            false
          end

        Sandwich code - methods that have to perform a 'before' and 'after' action.

        code example

          def time_taken
            start = Time.now
            yield
            end - Time.now

            start - end
          end

        METHODS WITH AN EXPLICIT BLOCK PARAMETER
          &block is a special paramater that will convert block passed to the method into a Proc object.
          def example(&block)
            puts "What's &block? #{block}"
          end


      PROCS
        Are OBJECTS
          lets us call methods, assign to variables and return themselves.
          In contrast to blocks, you can pass multiple procs to methods (argument list)
            Does NOT CHECK NUMBER OF ARGS PASSED TO IT.
              If it requires an arg and none is passed it will return nil. If more args than required passed in, it ignores the extra args.


      LAMBDAS
        Also a member of the PROC OBJECT CLASS but HAS DIFFERENCES
        DOES CHECK NUMBER of ARGS PASSED TO IT


RESERVED WORDS
  Reserved word     Description
  BEGIN             Code, enclosed in { and }, to run before the program runs.
  END               Code, enclosed in { and }, to run when the program ends.
  alias             CREATES an alias for an existing method, operator, or global variable.
  and               LOGICAL operator; same as && except and has lower precedence.
  begin             Begins a code block or group of statements; closes with end.
  break             Terminates a while or until loop or a method inside a block.
  \case             Compares an expression with a matching when clause; closes with end.
  class             Defines a class; closes with end.
  def               Defines a method; closes with end.
  defined?          Determines if a variable, method, super method, or block exists.
  do                Begins a block and executes code in that block; closes with end.
  else              Executes if previous conditional, in if, elsif, unless, or when, is not true.
  elsif             Executes if previous conditional, in if or elsif, is not true.
  end               Ends a code block (group of statements) starting with begin, def, do, if, etc.
  ensure            Always executes at block termination; use after last rescue.
  false             Logical or Boolean false, instance of FalseClass. (See true.)
  for               Begins a for loop; used with in.
  if                Executes code block if true. Closes with end.
  module            Defines a module; closes with end.
  next              Jumps before a loop's conditional.
  nil               Empty, uninitialized variable, or invalid, but not the same as zero; object of NilClass.
  not               Logical operator; same as !.
  or                Logical operator; same as || except or has lower precedence.
  redo              Jumps after a loop's conditional.
  rescue            Evaluates an expression after an exception is raised; used before ensure.
  retry             Repeats a method call outside of rescue; jumps to top of block (begin) if inside rescue.
  return            Returns a value from a method or block. May be omitted.
  self              Current object (invoked by a method).
  super             Calls method of the same name in the superclass. The superclass is the parent of this class.
  then              A continuation for if, unless, and when. May be omitted.
  true              Logical or Boolean true, instance of TrueClass.
  undef             Makes a method in current class undefined.
  unless            Executes code block if conditional statement is false.
  until             Executes code block while conditional statement is false.
  when              Starts a clause (one or more) under case.
  while             Executes code while the conditional statement is true.
  yield             Executes the block passed to the method.
  _ _FILE_ _        Name of current source file.
  _ _LINE_ _     Number of current line in the current source fil